// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/Koyo-os/Poll-service/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PollRepository is an autogenerated mock type for the PollRepository type
type PollRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *PollRepository) Add(_a0 *entity.Poll) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Poll) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOne provides a mock function with given fields: _a0
func (_m *PollRepository) GetOne(_a0 uuid.UUID) (*entity.Poll, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetOne")
	}

	var r0 *entity.Poll
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*entity.Poll, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entity.Poll); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Poll)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *PollRepository) Update(_a0 uuid.UUID, _a1 *entity.Poll) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *entity.Poll) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPollRepository creates a new instance of PollRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPollRepository(t interface {
	mock.TestingT
	Cleanup(func())
},
) *PollRepository {
	mock := &PollRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
